AWSTemplateFormatVersion: '2010-09-09'
Description: Template for a Virtual Private Cloud (VPC).

Resources:
# VPC con cidr 10.0.0.0/16
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC

# 2 Public Subnet e 2 Private Subnet
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-1a
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-1b
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
  
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-1a
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-1b
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true

# Creazione Internet Gateway

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: "MyInternetGateway"

  MyVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref MyInternetGateway

#Route Table Public

  MyPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref MyPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  MyPublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref MyPublicRouteTable

# Creazione NAT Gateway con relativo Elastic IP

  NatGatewaySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for NAT Gateway
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443' 
          ToPort: '443'   
          CidrIp: 0.0.0.0/0 # Consentire la comunicazione in ingresso da qualsiasi punto

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPNatGateway.AllocationId
      SUbnetId: !Ref PublicSubnetA
      SecurityGroupIDs:
        - !Ref NatGatewaySecurityGroup

  EIPNatGateway:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

#Creazione Private Route

  MyPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  MyPrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref MyPrivateRouteTable

#Security Group con traffico in entrata http, ssh, https

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: 80
      TargetType: instance

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
    Subnets:
      - !Ref 'PublicSubnetA'
      - !Ref 'PublicSubnetB'

    SecurityGroups:
      -!Ref EC2SecurityGroup

  MyListener:
  Type: AWS::ElasticLoadBalancingV2::Listener
  Properties:
    LoadBalancerArn: !Ref MyLoadBalancer
    Protocol: HTTP
    Port: 80
    DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref MyTargetGroup


  MyLoadBalancerAttachment:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Ref 'MyAutoScalingGroup'
      LoadBalancerNames:
        - !Ref 'MyLoadBalancer'

  MyLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: "ami-04b1ddd35fd71475a"    #Ubuntu Linux 14.04 x64
      InstanceType: t2.micro  
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex

          # Installa Apache e PHP
          yum update -y
          yum install -y httpd24 php56 mysql

          # Scarica e installa WordPress
          cd /var/www/html
          wget https://wordpress.org/latest.tar.gz
          tar -xzvf latest.tar.gz
          chown -R apache:apache wordpress

          # Configura WordPress
          cp wordpress/wp-config-sample.php wordpress/wp-config.php
          sed -i 's/database_name_here/mydb/' wordpress/wp-config.php
          sed -i 's/username_here/mydbuser/' wordpress/wp-config.php
          sed -i 's/password_here/mypassword/' wordpress/wp-config.php

          # Avvia Apache
          service httpd start
          chkconfig httpd on

  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref MyLaunchConfig
      MinSize: 1  # Il numero minimo di istanze nel gruppo
      MaxSize: 5  # Il numero massimo di istanze nel gruppo
      DesiredCapacity: 2  # Il numero desiderato di istanze nel gruppo
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300   
      VPCZoneIdentifier:
        - !Ref 'PublicSubnetA'
        - !Ref 'PublicSubnetB'
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:
        - Key: Name
        - Value: "MyWordPressInstance"
                           

# RDS (Database) 
  
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS in both availability zones
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
  
  MyDBInstance: 
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t2.micro
      Engine: mysql
      EngineVersion: 5.7
      MasterUsername: admin
      MasterUserPassword: adminpassword
      VPCSecurityGroups:
        - !GetAtt MyDBSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DBSubnetGroup
  
  MyDBReadReplica:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: mydb-read-replica
      SourceDBInstanceIdentifier: !Ref MyDBInstance
      DBInstanceClass: db.t2.micro
      AvailabilityZone: us-west-1b
      DBSubnetGroupName: !Ref DBSubnetGroup

  MyDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0

  MyDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          DestinationSecurityGroupId: !GetAtt NatGatewaySecurityGroup.GroupId # Usato per comunicazione in uscita con NAT Gateway

  Resources:
  MyCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: "Descrizione della distribuzione"
        DefaultRootObject: "index.html"
        Enabled: true
        PriceClass: "PriceClass_100"
        ViewerCertificate:
          SslSupportMethod: "sni-only"
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          TargetOriginId: "MyELBOrigin"
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: "none"
          ViewerProtocolPolicy: "allow-all"
        Origins:
          - Id: "MyELBOrigin"
            DomainName: !GetAtt MyLoadBalancer.DNSName  # Ottiene il DNS name del tuo ELB
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: "https-only"
