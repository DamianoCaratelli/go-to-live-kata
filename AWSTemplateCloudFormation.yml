AWSTemplateFormatVersion: '2010-09-09'
Description: Template for a Virtual Private Cloud (VPC).

Resources:
# VPC con cidr 10.0.0.0/16
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC

# 2 Public Subnet e 2 Private Subnet
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-1a
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-1b
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
  
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-1a
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-west-1b
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true

# Creazione Internet Gateway

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: "MyInternetGateway"

  MyVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref MyInternetGateway


  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Listeners:
      - LoadBalancerPort: 80
        InstancePort: 8080 
        Protocol: HTTP 
    Subnets:
      - !Ref 'PublicSubnetA'
      - !Ref 'PublicSubnetB'

MyLoadBalancerAttachment:
  Type: AWS::AutoScaling::AutoScalingGroup
  Properties:
    AutoScalingGroupName: !Ref 'MyAutoScalingGroup'
    LoadBalancerNames:
      - !Ref 'MyLoadBalancer'

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-04b1ddd35fd71475a"    #Ubuntu Linux 14.04 x64 
      InstanceType: t2.micro
      KeyName: my-key-pair
      SecurityGroupIds:
        - !Ref SecurityGroup 
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
    
  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - !Ref 'AvailabilityZone'
      LaunchConfigurationName: "MyLaunchConfig"
      MinSize: 2
      MaxSize: 6
      DesiredCapacity: 4
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300                        

# RDS (Database) 
  MyDBInstance: 
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t2.micro
      Engine: mysql
      EngineVersion: 5.7
      MasterUsername: admin
      MasterUserPassword: adminpassword
      VPCSecurityGroups:
        - !GetAtt MyDBSecurityGroup.GroupId

  MyDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0

  MyWebApp:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      Description: WordPress Application

  MyEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref MyWebApp
      Description: WordPress Environment
      EnvironmentName: MyWordPressEnvironment
      SolutionStackName: 64bit Amazon Linux 2 v4.3.1 running PHP 7.4
      OptionSettings:
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: InstanceType
          Value: !Ref InstanceType
      Tier:
        Type: Standard
      VersionLabel: SampleApplication

Outputs:
  WebsiteURL:
    Description: URL of the WordPress Website
    Value: !GetAtt MyEnvironment.EndpointURL
  MyEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref MyWebApp
      ...

      OptionSettings:
        - Namespace: aws:elasticbeanstalk:container:php:phpini
          OptionName: document_root
          Value: /var/www/html/wordpress

        - Namespace: aws:elasticbeanstalk:container:php:phpini
          OptionName: memory_limit
          Value: 256M

      ...

      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install -y httpd
          service httpd start
          chkconfig httpd on

          # Install WordPress
          wget https://wordpress.org/latest.tar.gz
          tar -xzvf latest.tar.gz
          mv wordpress/* /var/www/html


